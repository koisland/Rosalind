s = 'GGATGTATTCATTTAATAACAGATTCATTGGATTCATTATTCATTATTCATTATTCATTATTCATTCTTCATTCATTTCATTCATTCATTCATTTAAATTCATTCGGCATTCATTTAATTCATTCCTATTCATTGGCATTCATTATTCATTTCGATGAGACACATTCATTACATATTCATTATTCATTCTGGGATTCATTGATTCATTCATGATTCATTCGAGCGCGCGATTCATTATTCATTGGGCCTAAGTTCCATTCATTATTCATTATTCATTTCTCTGAATCATTCATTAGCATTCATTCGCATTCATTGCGGCAATTCATTCGACCGTGCGTATTCATTCATTCATTAATTCATTATTCATTTATTCATTATTCATTGGATTCATTGAGATTCATTGGAATTCATTGCGGCTAATTCATTAGTCACGCCCTATTCATTATTCATTATTGTGATTCATTATTCATTGGATTCATTAATTCATTCCTATTCATTTAAGATCAATTCATTTCCTAGATTCATTATGATCATTCATTAACGCCATTCATTCATATTCATTATTCATTATTCATTTGGATTCATTGATTCATTTATTCATTCAATTCATTATTCATTTATATTCATTATATTCATTTTAATTCATTGCATTCATTATTCATTAGCAGATTCATTTATTCATTCGACGGATTCATTATTCATTATTCATTCTGTAATTCATTCCAATAATATTCATTATTCATTATTCATTATTCATTGATTCATTGGTGATTCATTTCATTCATTAATTCATTTATTCATTATTCATTCGATTCATTAAATTCATTAAGCATTCATTATGGATTCATTAGATGGTACCCTTATTCATTTATTCATTATG'
t = 'ATTCATTAT'

# 2, 4, and 10
locations = []

# Works but is a bad solution as not flexible with longer t.
for index, nt in enumerate(s[:-8]):  # To avoid index error. Cannot get match after this point anyways.
    if s[index] == t[0] and s[index + 1] == t[1] and s[index + 2] == t[2] and s[index + 3] == t[3] \
            and s[index + 4] == t[4] and s[index + 5] == t[5] and s[index + 6] == t[6] and s[index + 7] == t[7] and s[index + 8] == t[8]:
        locations.append(str(index+1))

print(' '.join(locations))


# Optimal solution VVV
new_locations = []
for index, nt in enumerate(s):
    if s[index:].startswith(t):
        new_locations.append(str(index + 1))

print(' '.join(new_locations))